package sls

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// UpdateLogStore invokes the sls.UpdateLogStore API synchronously
// api document: https://help.aliyun.com/api/sls/updatelogstore.html
func (client *Client) UpdateLogStore(request *UpdateLogStoreRequest) (response *UpdateLogStoreResponse, err error) {
	response = CreateUpdateLogStoreResponse()
	err = client.DoAction(request, response)
	return
}

// UpdateLogStoreWithChan invokes the sls.UpdateLogStore API asynchronously
// api document: https://help.aliyun.com/api/sls/updatelogstore.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) UpdateLogStoreWithChan(request *UpdateLogStoreRequest) (<-chan *UpdateLogStoreResponse, <-chan error) {
	responseChan := make(chan *UpdateLogStoreResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.UpdateLogStore(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// UpdateLogStoreWithCallback invokes the sls.UpdateLogStore API asynchronously
// api document: https://help.aliyun.com/api/sls/updatelogstore.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) UpdateLogStoreWithCallback(request *UpdateLogStoreRequest, callback func(response *UpdateLogStoreResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *UpdateLogStoreResponse
		var err error
		defer close(result)
		response, err = client.UpdateLogStore(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// UpdateLogStoreRequest is the request struct for api UpdateLogStore
type UpdateLogStoreRequest struct {
	*requests.RpcRequest
	LogStoreName   string           `position:"Query" name:"LogStoreName"`
	EnableTracking requests.Boolean `position:"Query" name:"EnableTracking"`
	AutoSplit      requests.Boolean `position:"Query" name:"AutoSplit"`
	MaxSplitShard  requests.Integer `position:"Query" name:"MaxSplitShard"`
	TTL            requests.Integer `position:"Query" name:"TTL"`
	ShardCount     requests.Integer `position:"Query" name:"ShardCount"`
}

// UpdateLogStoreResponse is the response struct for api UpdateLogStore
type UpdateLogStoreResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateUpdateLogStoreRequest creates a request to invoke UpdateLogStore API
func CreateUpdateLogStoreRequest() (request *UpdateLogStoreRequest) {
	request = &UpdateLogStoreRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Sls", "2019-10-23", "UpdateLogStore", "", "")
	return
}

// CreateUpdateLogStoreResponse creates a response to parse from UpdateLogStore response
func CreateUpdateLogStoreResponse() (response *UpdateLogStoreResponse) {
	response = &UpdateLogStoreResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
