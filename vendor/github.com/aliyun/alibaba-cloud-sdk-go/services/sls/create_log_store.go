package sls

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// CreateLogStore invokes the sls.CreateLogStore API synchronously
// api document: https://help.aliyun.com/api/sls/createlogstore.html
func (client *Client) CreateLogStore(request *CreateLogStoreRequest) (response *CreateLogStoreResponse, err error) {
	response = CreateCreateLogStoreResponse()
	err = client.DoAction(request, response)
	return
}

// CreateLogStoreWithChan invokes the sls.CreateLogStore API asynchronously
// api document: https://help.aliyun.com/api/sls/createlogstore.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateLogStoreWithChan(request *CreateLogStoreRequest) (<-chan *CreateLogStoreResponse, <-chan error) {
	responseChan := make(chan *CreateLogStoreResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.CreateLogStore(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// CreateLogStoreWithCallback invokes the sls.CreateLogStore API asynchronously
// api document: https://help.aliyun.com/api/sls/createlogstore.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) CreateLogStoreWithCallback(request *CreateLogStoreRequest, callback func(response *CreateLogStoreResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *CreateLogStoreResponse
		var err error
		defer close(result)
		response, err = client.CreateLogStore(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// CreateLogStoreRequest is the request struct for api CreateLogStore
type CreateLogStoreRequest struct {
	*requests.RpcRequest
	LogStoreName   string           `position:"Query" name:"LogStoreName"`
	EnableTracking requests.Boolean `position:"Query" name:"EnableTracking"`
	AutoSplit      requests.Boolean `position:"Query" name:"AutoSplit"`
	MaxSplitShard  requests.Integer `position:"Query" name:"MaxSplitShard"`
	TTL            requests.Integer `position:"Query" name:"TTL"`
	ShardCount     requests.Integer `position:"Query" name:"ShardCount"`
}

// CreateLogStoreResponse is the response struct for api CreateLogStore
type CreateLogStoreResponse struct {
	*responses.BaseResponse
	RequestId string `json:"RequestId" xml:"RequestId"`
}

// CreateCreateLogStoreRequest creates a request to invoke CreateLogStore API
func CreateCreateLogStoreRequest() (request *CreateLogStoreRequest) {
	request = &CreateLogStoreRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Sls", "2019-10-23", "CreateLogStore", "", "")
	return
}

// CreateCreateLogStoreResponse creates a response to parse from CreateLogStore response
func CreateCreateLogStoreResponse() (response *CreateLogStoreResponse) {
	response = &CreateLogStoreResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
