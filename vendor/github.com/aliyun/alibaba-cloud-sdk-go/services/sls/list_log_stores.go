package sls

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
//
// Code generated by Alibaba Cloud SDK Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import (
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/requests"
	"github.com/aliyun/alibaba-cloud-sdk-go/sdk/responses"
)

// ListLogStores invokes the sls.ListLogStores API synchronously
// api document: https://help.aliyun.com/api/sls/listlogstores.html
func (client *Client) ListLogStores(request *ListLogStoresRequest) (response *ListLogStoresResponse, err error) {
	response = CreateListLogStoresResponse()
	err = client.DoAction(request, response)
	return
}

// ListLogStoresWithChan invokes the sls.ListLogStores API asynchronously
// api document: https://help.aliyun.com/api/sls/listlogstores.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ListLogStoresWithChan(request *ListLogStoresRequest) (<-chan *ListLogStoresResponse, <-chan error) {
	responseChan := make(chan *ListLogStoresResponse, 1)
	errChan := make(chan error, 1)
	err := client.AddAsyncTask(func() {
		defer close(responseChan)
		defer close(errChan)
		response, err := client.ListLogStores(request)
		if err != nil {
			errChan <- err
		} else {
			responseChan <- response
		}
	})
	if err != nil {
		errChan <- err
		close(responseChan)
		close(errChan)
	}
	return responseChan, errChan
}

// ListLogStoresWithCallback invokes the sls.ListLogStores API asynchronously
// api document: https://help.aliyun.com/api/sls/listlogstores.html
// asynchronous document: https://help.aliyun.com/document_detail/66220.html
func (client *Client) ListLogStoresWithCallback(request *ListLogStoresRequest, callback func(response *ListLogStoresResponse, err error)) <-chan int {
	result := make(chan int, 1)
	err := client.AddAsyncTask(func() {
		var response *ListLogStoresResponse
		var err error
		defer close(result)
		response, err = client.ListLogStores(request)
		callback(response, err)
		result <- 1
	})
	if err != nil {
		defer close(result)
		callback(nil, err)
		result <- 0
	}
	return result
}

// ListLogStoresRequest is the request struct for api ListLogStores
type ListLogStoresRequest struct {
	*requests.RpcRequest
	LogStoreName string           `position:"Query" name:"LogStoreName"`
	OffSet       requests.Integer `position:"Query" name:"OffSet"`
	Size         requests.Integer `position:"Query" name:"Size"`
}

// ListLogStoresResponse is the response struct for api ListLogStores
type ListLogStoresResponse struct {
	*responses.BaseResponse
	LogStores map[string]interface{} `json:"LogStores" xml:"LogStores"`
	Count     int                    `json:"Count" xml:"Count"`
	Total     int                    `json:"Total" xml:"Total"`
}

// CreateListLogStoresRequest creates a request to invoke ListLogStores API
func CreateListLogStoresRequest() (request *ListLogStoresRequest) {
	request = &ListLogStoresRequest{
		RpcRequest: &requests.RpcRequest{},
	}
	request.InitWithApiInfo("Sls", "2019-10-23", "ListLogStores", "", "")
	return
}

// CreateListLogStoresResponse creates a response to parse from ListLogStores response
func CreateListLogStoresResponse() (response *ListLogStoresResponse) {
	response = &ListLogStoresResponse{
		BaseResponse: &responses.BaseResponse{},
	}
	return
}
